input {
    beats {
        port => 5044
        ssl => false
    }
}

filter {
        # Parse JSON message
    # json {
    #     source => "message"
    #     target => "log_entry"
    # }

    # # Parse the inner JSON message field
    # if [log_entry][message] {
    #     json {
    #         source => "[log_entry][message]"
    #         target => "parsed_message"
    #     }
    # }

    # # Keep only essential fields
    # prune {
    #     whitelist_names => [
    #         "@timestamp",
    #         "log_entry.type",
    #         "log_entry.level",
    #         "log_entry.message",
    #         "container.name",
    #         "container.image.name",
    #         "stream",
    #         "host.name",
    #         "agent.name",
    #         "agent.type"
    #     ]
    # }

    # Keep and rename fields we want
    # mutate {
    #     add_field => {
    #         "[@metadata][type]" => "%{[log_entry][type]}"
    #         "log_level" => "%{[parsed_message][level]}"
    #         "log_message" => "%{[parsed_message][message]}"
    #         "container_name" => "%{[container][name]}"
    #         "image_name" => "%{[container][image][name]}"
    #     }
        
    #     # Remove all other fields
    #     remove_field => [
    #         "message",
    #         "log_entry",
    #         "parsed_message",
    #         "event",
    #         "ecs",
    #         "input",
    #         "agent",
    #         "docker",
    #         "tags",
    #         "container",
    #         "host"
    #     ]
    # } 

    # # Clean up the message structure
    # mutate {
    #     rename => {
    #         "log_entry.type" => "[log][type]"
    #         "log_entry.level" => "[log][level]"
    #         "log_entry.message" => "[log][message]"
    #     }
    #     remove_field => ["message", "log_entry", "event", "ecs", "input"]
    # }

    # # Drop unnecessary events (optional)
    # if [stream] != "stdout" and [stream] != "stderr" {
    #     drop { }
    # }

    # Drop empty messages
    # if ![log_message] {
    #     drop { }
    # }

    # if [container][name] == "elastic-elasticsearch-1" {
    #     if [stream] != "stderr" {
    #         drop { }
    #     }
    # }

    # Drop logs that do not have "stream" field set to "stderr"
    # if [stream] != "stderr" {
    #     drop { }
    # }

    #     # Example: Drop logs from a specific container
    # if [docker][container][name] == "unwanted_container" {
    #     drop { }
    # }

    # # Example: Drop logs that contain a specific message
    # if "unwanted_message" in [message] {
    #     drop { }
    # }

    # # Example: Keep only logs from specific containers
    # if [docker][container][name] not in ["frontend", "vault", "elasticsearch", "kibana", "logstash"] {
    #     drop { }
    # }

    # # Example: Keep only logs with a specific log level
    # if [log][level] not in ["info", "error", "warn"] {
    #     drop { }
    # }

    # # Add more filters as needed

}

output {
    elasticsearch {
        hosts => "${ELASTICSEARCH_HOST_PORT}"
        user => "${ELASTIC_USERNAME}"
        password => "${ELASTIC_PASSWORD}"
        ssl => true
        ssl_certificate_verification => false
        cacert => "/usr/share/logstash/config/certs/ca.crt"
        index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    }
}

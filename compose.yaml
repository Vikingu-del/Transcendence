services:
  vault:
    container_name: vault
    build:
      context: ./Security/Vault
      dockerfile: Dockerfile
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      - backtier
      - devops
    environment:
      - VAULT_ADDR=http://vault:8200
    volumes:
      - vault_data:/vault/file
      - vault_token:/vault/token
      - approle_user:/vault/approle/user
      - approle_user_db:/vault/approle/user_db  
      - approle_gateway:/vault/approle/gateway
      - approle_chat:/vault/approle/chat
      - approle_chat_db:/vault/approle/chat_db
      - approle_auth:/vault/approle/auth
      - approle_auth_db:/vault/approle/auth_db
      - approle_game:/vault/approle/game
      - approle_game_db:/vault/approle/game_db
      - approle_notification_db:/vault/approle/notification_db
      - approle_notification:/vault/approle/notification
      - approle_elasticsearch:/vault/approle/elasticsearch
      - approle_grafana:/vault/approle/grafana
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://localhost:8200"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  vault_secrets:
    container_name: vault_secrets
    build:
      context: ./Security/VaultSecrets
      dockerfile: Dockerfile
    env_file:
      - ./Security/VaultSecrets/secrets/.env
    networks:
      - backtier
      - devops
    depends_on:
      vault:
        condition: service_healthy
    restart: on-failure
    volumes:
      - vault_token:/vault/token:ro
      - approle_user:/vault/approle/user
      - approle_user_db:/vault/approle/user_db
      - approle_gateway:/vault/approle/gateway
      - approle_chat:/vault/approle/chat
      - approle_chat_db:/vault/approle/chat_db
      - approle_auth:/vault/approle/auth
      - approle_auth_db:/vault/approle/auth_db
      - approle_game:/vault/approle/game
      - approle_game_db:/vault/approle/game_db
      - approle_notification_db:/vault/approle/notification_db
      - approle_notification:/vault/approle/notification
      - approle_elasticsearch:/vault/approle/elasticsearch
      - approle_grafana:/vault/approle/grafana

  user:
    container_name: user
    build:
      context: ./Backend/userService
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/userService:/app
      - approle_user:/vault/approle/user:ro
      - user_static:/app/static
      - user_media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=userService.settings
      - AUTH_SERVICE_URL=http://auth:8001
      - INTERNAL_API_KEY=your-secure-key-here
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      user_db:
        condition: service_healthy
    networks:
      - backtier

  user_db:
    container_name: user_db
    build:
      context: ./Database/user_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: 
      - "5432:5432"
    volumes:
      - approle_user_db:/vault/approle/user_db:ro
      - user_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  chat:
    container_name: chat
    build:
      context: ./Backend/chatService
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./Backend/chatService:/app
      - approle_chat:/vault/approle/chat:ro
      - user_static:/app/static
      - user_media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=chatService.settings
      - API_PREFIX=/api/chat
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      chat_db:
        condition: service_healthy
    networks:
      - backtier
    
  chat_db:
    container_name: chat_db
    build:
      context: ./Database/chat_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - approle_chat_db:/vault/approle/chat_db:ro
      - chat_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  redis:
    container_name: redis
    image: redis:alpine
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - backtier
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5


  auth:
    container_name: auth
    build:
      context: ./Backend/authService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./Backend/authService:/app
      - approle_auth:/vault/approle/auth:ro
    environment:
      - DJANGO_SETTINGS_MODULE=authService.settings
      - USER_SERVICE_URL=http://user:8000  # For service communication
      - INTERNAL_API_KEY=your-secure-key-here #AddddDDDED IVAN
    depends_on:
      vault:
        condition: service_started
      user:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      auth_db:
        condition: service_healthy
    networks:
      - backtier

  auth_db:
    container_name: auth_db
    build:
      context: ./Database/auth_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    volumes:
      - approle_auth_db:/vault/approle/auth_db:ro
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - backtier
    

  game:
    container_name: game
    build:
      context: ./Backend/gameService
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    volumes:
      - ./Backend/gameService:/app
      - approle_game:/vault/approle/game:ro
    environment:
      - DJANGO_SETTINGS_MODULE=gameService.settings
      - USER_SERVICE_URL=http://gateway/user
      - AUTH_SERVICE_URL=http://gateway/auth
      - INTERNAL_API_KEY=your-secure-key-here
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      game_db:
        condition: service_healthy
    networks:
      - backtier

  game_db:
    container_name: game_db
    build:
      context: ./Database/game_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5435:5432"
    volumes:
      - approle_game_db:/vault/approle/game_db:ro
      - game_db_data:/var/lib/postgresql/data
    networks:
      - backtier


  notification:
    container_name: notification
    build:
      context: ./Backend/notificationService
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    volumes:
      - ./Backend/notificationService:/app
      - approle_notification:/vault/approle/notification:ro
    environment:
      - DJANGO_SETTINGS_MODULE=notificationService.settings
      - USER_SERVICE_URL=http://gateway/user
      - AUTH_SERVICE_URL=http://gateway/auth
      - INTERNAL_API_KEY=your-secure-key-here
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      notification_db:
        condition: service_healthy
    networks:
      - backtier

  notification_db:
    container_name: notification_db
    build:
      context: ./Database/notification_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5436:5432"
    volumes:
      - approle_notification_db:/vault/approle/notification_db:ro
      - notification_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  gateway:
    container_name: gateway
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      - vault
      - vault_secrets
      - user
      - frontend
      - chat
      - auth
    volumes:
      - approle_gateway:/vault/approle/gateway:ro
      - ./ApiGateway/config/nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./ApiGateway/config/modsecurity:/etc/nginx/templates/modsecurity:ro
      - ./ApiGateway/ssl:/etc/nginx/ssl:ro # Mount SSL certificates
      - user_static:/app/static
      - user_media:/app/media
    # environment:
    #   - NGINX_HOST=${NGINX_HOST:-10.12.12.5}
    #   - NGINX_PORT=${NGINX_PORT:-443}
    networks:
      - backtier
      - frontier
      - devops

  frontend:
    container_name: frontend
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Vite's default dev server port
    volumes:
      - ./FrontEnd:/app
      - /app/node_modules # Preserve node_modules from container
    environment:
      - NODE_ENV=development
      # - VITE_HOST=0.0.0.0
      # - VITE_API_URL=${NGINX_HOST:-10.12.12.5}
    command: npm run dev -- --host
    networks:
      - frontier

  elasticsearch:
    build:
      context: ./elk/elasticsearch
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - ES_JAVA_OPTS=-Xmx1g -Xms1g
      - discovery.type=single-node
      - xpack.security.enabled=true
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - approle_elasticsearch:/vault/approle/elasticsearch:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    networks:
      - devops
    healthcheck:
      test: ["CMD", "curl", "-sf", "-u", "elastic:changeme", "http://localhost:9200/_cluster/health?pretty"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.0
    container_name: logstash
    restart: unless-stopped
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk/logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      - ELASTICSEARCH_HOST_PORT=http://elasticsearch:9200
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=changeme
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - devops
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.0
    container_name: kibana
    restart: unless-stopped
    volumes:
      - ./elk/kibana/config/:/usr/share/kibana/config:ro
    environment:
      - ELASTICSEARCH_HOST_PORT=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_user
      - ELASTICSEARCH_PASSWORD=kibana_password
    ports:
      - "5601:5601"
    networks:
      - devops
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.17.0
    container_name: filebeat
    user: root
    command: -e --strict.perms=false
    restart: unless-stopped
    volumes:
      - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      ELASTICSEARCH_HOST_PORT: http://elasticsearch:9200
      KIBANA_HOST_PORT: http://localhost:5601
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: changeme
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - devops

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: always
    networks:
      - devops
    depends_on:
      - node-exporter

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100"
    restart: always
    networks:
      - devops
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  grafana:
    build:
      context: ./monitoring/grafana
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    networks:
      - devops
    volumes:
      - approle_grafana:/vault/approle/grafana:ro
    depends_on:
      prometheus:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      vault:
        condition: service_healthy


  cAdvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    networks:
      - devops
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /:/rootfs:ro
      - /dev/disk/:/dev/disk:ro
    restart: always

  postgres_exporter:
    image: wrouesnel/postgres_exporter
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://user_dbuser:user_dbpass@user_db:5432/user_dbname?sslmode=disable"
    ports:
      - "9187:9187"
    
    depends_on:
      - user_db
    networks:
      - backtier
      - devops

volumes:
  vault_data:
  vault_token:
  approle_user:
  approle_user_db:
  approle_gateway:
  approle_elasticsearch:
  user_static:
  game_db_data:
  user_db_data:
  chat_db_data:
  auth_db_data:
  approle_game:
  approle_game_db:
  approle_chat:
  approle_chat_db:
  approle_auth:
  approle_auth_db:
  approle_grafana:
  redis_data:
  approle_notification:
  approle_notification_db:
  notification_db_data:
  elasticsearch-data:
  prometheus-data:
  user_media:

networks:
  user_network:
    driver: bridge
  backtier:
    driver: bridge
    name: backtier
  frontier:
    driver: bridge
    name: frontier
  devops:
    driver: bridge
    name: devops
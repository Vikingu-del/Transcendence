services:

  # swagger:
  #   container_name: swagger
  #   build:
  #     context: ./Swagger
  #     dockerfile: Dockerfile
  #   environment:
  #     URLS_PRIMARY_NAME: "UserService" # Default API to display in Swagger UI
  #     URLS: '[{ "url": "/doc/ApiGateway.yaml", "name": "ApiGateway" }, 
  #        { "url": "/doc/UserService.yaml", "name": "UserService" },
  #        { "url": "/doc/Security.yaml", "name": "Security" },
  #        { "url": "/doc/Database.yaml", "name": "Database" },
  #        { "url": "/doc/FrontEnd.yaml", "name": "FrontEnd" }]'
  #   volumes:
  #     - ./docs/openapi:/usr/share/nginx/html/doc # Mount local OpenAPI specs
  #   ports:
  #     - "8080:8080"  # Swagger UI available at localhost:8080
  #   restart: always
  #   networks:
  #     backtier:

  vault:
    container_name: vault
    build:
      context: ./Security/Vault
      dockerfile: Dockerfile
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      - backtier
    environment:
      - VAULT_ADDR=http://vault:8200
    volumes:
      - vault_data:/vault/file
      - vault_token:/vault/token
      - approle_user:/vault/approle/user
      - approle_user_db:/vault/approle/user_db  
      - approle_gateway:/vault/approle/gateway
      - approle_chat:/vault/approle/chat
      - approle_chat_db:/vault/approle/chat_db
      - approle_auth:/vault/approle/auth
      - approle_auth_db:/vault/approle/auth_db
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://localhost:8200"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  vault_secrets:
    container_name: vault_secrets
    build:
      context: ./Security/VaultSecrets
      dockerfile: Dockerfile
    env_file:
      - ./Security/VaultSecrets/secrets/.env
    networks:
      - backtier
    depends_on:
      vault:
        condition: service_healthy
    restart: on-failure
    volumes:
      - vault_token:/vault/token:ro
      - approle_user:/vault/approle/user
      - approle_user_db:/vault/approle/user_db
      - approle_gateway:/vault/approle/gateway
      - approle_chat:/vault/approle/chat
      - approle_chat_db:/vault/approle/chat_db
      - approle_auth:/vault/approle/auth
      - approle_auth_db:/vault/approle/auth_db

  user:
    container_name: user
    build:
      context: ./Backend/userService
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/userService:/app
      - approle_user:/vault/approle/user:ro
    environment:
      - DJANGO_SETTINGS_MODULE=userService.settings
      - API_PREFIX=/api/user
      # - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,10.12.12.5,user_service,user,user_db,gateway
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      user_db:
        condition: service_healthy
    networks:
      - backtier

  user_db:
    container_name: user_db
    build:
      context: ./Database/user_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: 
      - "5432:5432"
    volumes:
      - approle_user_db:/vault/approle/user_db:ro
      - user_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  chat:
    container_name: chat
    build:
      context: ./Backend/chatService
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./Backend/chatService:/app
      - approle_chat:/vault/approle/chat:ro
    environment:
      - DJANGO_SETTINGS_MODULE=chatService.settings
      - API_PREFIX=/api/chat
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      chat_db:
        condition: service_healthy
    networks:
      - backtier
    
  chat_db:
    container_name: chat_db
    build:
      context: ./Database/chat_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - approle_chat_db:/vault/approle/chat_db:ro
      - chat_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  auth:
    container_name: auth
    build:
      context: ./Backend/authService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./Backend/authService:/app
      - approle_auth:/vault/approle/auth:ro
    environment:
      - DJANGO_SETTINGS_MODULE=authService.settings
      - USER_SERVICE_URL=http://user:8000  # For service communication
      - INTERNAL_API_KEY=your-secure-key-here #AddddDDDED IVAN
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,auth,gateway,0.0.0.0 #AddddDDDED IVAN
      - DEBUG=1 #AddddDDDED IVAN
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      auth_db:
        condition: service_healthy
    networks:
      - backtier

  auth_db:
    container_name: auth_db
    build:
      context: ./Database/auth_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    volumes:
      - approle_auth_db:/vault/approle/auth_db:ro
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - backtier
    

  gateway:
    container_name: gateway
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      - vault
      - vault_secrets
      - user
      - frontend
      - chat
      - auth
    volumes:
      - approle_gateway:/vault/approle/gateway:ro
      - ./ApiGateway/config/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./ApiGateway/config/modsecurity:/etc/nginx/templates/modsecurity:ro
      - ./.cert/:/etc/nginx/ssl/:ro
    environment:
      - NGINX_HOST=${NGINX_HOST:-10.12.12.5}
      - NGINX_PORT=${NGINX_PORT:-443}
    networks:
      - backtier
      - frontier

  frontend:
    container_name: frontend
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Vite's default dev server port
    volumes:
      - ./FrontEnd:/app
      - /app/node_modules # Preserve node_modules from container
    environment:
      - NODE_ENV=development
      - VITE_HOST=0.0.0.0
      - VITE_API_URL=${NGINX_HOST:-10.12.12.5}
    command: npm run dev -- --host
    networks:
      - frontier

volumes:
  vault_data:
  vault_token:
  approle_user:
  approle_user_db:
  approle_gateway:
  user_db_data:
  chat_db_data:
  auth_db_data:
  approle_chat:
  approle_chat_db:
  approle_auth:
  approle_auth_db:

networks:
  user_network:
    driver: bridge
  backtier:
    driver: bridge
    name: backtier
  frontier:
    driver: bridge
    name: frontier

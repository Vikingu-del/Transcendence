services:
  vault:
    container_name: vault
    build:
      context: ./Security/Vault
      dockerfile: Dockerfile
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      - backtier
    environment:
      - VAULT_ADDR=http://vault:8200
    volumes:
      - vault_data:/vault/file
      - vault_token:/vault/token
      - approle_user:/vault/approle/user
      - approle_user_db:/vault/approle/user_db  
      - approle_gateway:/vault/approle/gateway
      - approle_chat:/vault/approle/chat
      - approle_chat_db:/vault/approle/chat_db
      - approle_auth:/vault/approle/auth
      - approle_auth_db:/vault/approle/auth_db
      - approle_game:/vault/approle/game
      - approle_game_db:/vault/approle/game_db
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://localhost:8200"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  vault_secrets:
    container_name: vault_secrets
    build:
      context: ./Security/VaultSecrets
      dockerfile: Dockerfile
    env_file:
      - ./Security/VaultSecrets/secrets/.env
    networks:
      - backtier
    depends_on:
      vault:
        condition: service_healthy
    restart: on-failure
    volumes:
      - vault_token:/vault/token:ro
      - approle_user:/vault/approle/user
      - approle_user_db:/vault/approle/user_db
      - approle_gateway:/vault/approle/gateway
      - approle_chat:/vault/approle/chat
      - approle_chat_db:/vault/approle/chat_db
      - approle_auth:/vault/approle/auth
      - approle_auth_db:/vault/approle/auth_db
      - approle_game:/vault/approle/game
      - approle_game_db:/vault/approle/game_db

  user:
    container_name: user
    build:
      context: ./Backend/userService
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/userService:/app
      - approle_user:/vault/approle/user:ro
      - user_static:/app/static
      - user_media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=userService.settings
      - AUTH_SERVICE_URL=http://auth:8001
      - INTERNAL_API_KEY=your-secure-key-here
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      user_db:
        condition: service_healthy
    networks:
      - backtier

  user_db:
    container_name: user_db
    build:
      context: ./Database/user_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: 
      - "5432:5432"
    volumes:
      - approle_user_db:/vault/approle/user_db:ro
      - user_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  chat:
    container_name: chat
    build:
      context: ./Backend/chatService
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./Backend/chatService:/app
      - approle_chat:/vault/approle/chat:ro
      - user_static:/app/static
      - user_media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=chatService.settings
      - API_PREFIX=/api/chat
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      chat_db:
        condition: service_healthy
    networks:
      - backtier
    
  chat_db:
    container_name: chat_db
    build:
      context: ./Database/chat_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - approle_chat_db:/vault/approle/chat_db:ro
      - chat_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  redis:
    container_name: redis
    image: redis:alpine
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - backtier
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5


  auth:
    container_name: auth
    build:
      context: ./Backend/authService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./Backend/authService:/app
      - approle_auth:/vault/approle/auth:ro
    environment:
      - DJANGO_SETTINGS_MODULE=authService.settings
      - USER_SERVICE_URL=http://user:8000  # For service communication
      - INTERNAL_API_KEY=your-secure-key-here #AddddDDDED IVAN
    depends_on:
      vault:
        condition: service_started
      user:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      auth_db:
        condition: service_healthy
    networks:
      - backtier

  auth_db:
    container_name: auth_db
    build:
      context: ./Database/auth_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    volumes:
      - approle_auth_db:/vault/approle/auth_db:ro
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - backtier
    

  game:
    container_name: game
    build:
      context: ./Backend/gameService
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    volumes:
      - ./Backend/gameService:/app
      - approle_game:/vault/approle/game:ro
    environment:
      - DJANGO_SETTINGS_MODULE=gameService.settings
      - USER_SERVICE_URL=http://gateway/user
      - AUTH_SERVICE_URL=http://gateway/auth
      - INTERNAL_API_KEY=your-secure-key-here
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      game_db:
        condition: service_healthy
    networks:
      - backtier

  game_db:
    container_name: game_db
    build:
      context: ./Database/game_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5435:5432"
    volumes:
      - approle_game_db:/vault/approle/game_db:ro
      - game_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  gateway:
    container_name: gateway
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      - vault
      - vault_secrets
      - user
      - frontend
      - chat
      - auth
    volumes:
      - approle_gateway:/vault/approle/gateway:ro
      - ./ApiGateway/config/nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./ApiGateway/config/modsecurity:/etc/nginx/templates/modsecurity:ro
      - ./ApiGateway/ssl:/etc/nginx/ssl:ro # Mount SSL certificates
      - user_static:/app/static
      - user_media:/app/media
    # environment:
    #   - NGINX_HOST=${NGINX_HOST:-10.12.12.5}
    #   - NGINX_PORT=${NGINX_PORT:-443}
    networks:
      - backtier
      - frontier

  frontend:
    container_name: frontend
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Vite's default dev server port
    volumes:
      - ./FrontEnd:/app
      - /app/node_modules # Preserve node_modules from container
    environment:
      - NODE_ENV=development
      # - VITE_HOST=0.0.0.0
      # - VITE_API_URL=${NGINX_HOST:-10.12.12.5}
    command: npm run dev -- --host
    networks:
      - frontier

  elasticsearch:
      container_name: elasticsearch
      build:
        context: elk/elasticsearch/
        args:
          ELK_VERSION: ${ELK_VERSION}
      restart: unless-stopped
      environment:
        ELASTIC_USERNAME: ${ELASTIC_USERNAME}
        ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
        ELASTIC_CLUSTER_NAME: ${ELASTIC_CLUSTER_NAME}
        ELASTIC_NODE_NAME: ${ELASTIC_NODE_NAME}
        ELASTIC_INIT_MASTER_NODE: ${ELASTIC_INIT_MASTER_NODE}
        ELASTIC_DISCOVERY_SEEDS: ${ELASTIC_DISCOVERY_SEEDS}
        ES_JAVA_OPTS: "-Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP} -Des.enforce.bootstrap.checks=true"
        # bootstrap.memory_lock: "true"
      volumes:
        - elasticsearch-data:/usr/share/elasticsearch/data
        - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
        - ./elk/elasticsearch/config/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties
      secrets:
        - source: elasticsearch.keystore
          target: /usr/share/elasticsearch/config/elasticsearch.keystore
        - source: elasticsearch.service_tokens
          target: /usr/share/elasticsearch/config/service_tokens
        - source: elastic.ca
          target: /usr/share/elasticsearch/config/certs/ca.crt
        - source: elasticsearch.certificate
          target: /usr/share/elasticsearch/config/certs/elasticsearch.crt
        - source: elasticsearch.key
          target: /usr/share/elasticsearch/config/certs/elasticsearch.key    
      ports:
        - "9200:9200"
        - "9300:9300"
      depends_on:
        keystore_n_certs:
          condition: service_completed_successfully
      # ulimits:
      #   memlock:
      #     soft: -1
      #     hard: -1
      #   nofile:
      #     soft: 200000
      #     hard: 200000
      healthcheck:
        test: ["CMD", "sh", "-c", "curl -sf --insecure https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@localhost:9200/_cat/health | grep -ioE 'green|yellow' || echo 'not green/yellow cluster status'"]

  logstash:
    build:
      context: elk/logstash/
      args:
        ELK_VERSION: ${ELK_VERSION}
    container_name: logstash
    restart: unless-stopped
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk/logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./elk/secrets/certs/ca/ca.crt:/usr/share/logstash/config/certs/ca.crt:ro
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: https://elasticsearch:9200
      LS_JAVA_OPTS: "-Xmx${LOGSTASH_HEAP} -Xms${LOGSTASH_HEAP}"
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-s" ,"-XGET", "http://127.0.0.1:9600"]

  kibana:
    build:
      context: elk/kibana/
      args:
        ELK_VERSION: ${ELK_VERSION}
    container_name: kibana
    restart: unless-stopped
    volumes:
      - ./elk/kibana/config/:/usr/share/kibana/config:ro
    environment:
      ELASTICSEARCH_HOST_PORT: https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    env_file:
      - ./elk/secrets/.env.kibana.token
    secrets:
      - source: elastic.ca
        target: /certs/ca.crt
      - source: kibana.certificate
        target: /certs/kibana.crt
      - source: kibana.key
        target: /certs/kibana.key

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ELK_VERSION}
    container_name: filebeat
    user: root
    command: -e --strict.perms=false
    restart: unless-stopped
    volumes:
      - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_HOST_PORT: https://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
      KIBANA_HOST_PORT: ${KIBANA_HOST}:${KIBANA_PORT}
    depends_on:
      - elasticsearch
      - kibana
    labels:
      - "co.elastic.logs/enabled=true"


  keystore_n_certs:
    build:
        context: elk/setup/
        args:
          ELK_VERSION: ${ELK_VERSION}
    user: "0"
    volumes:
        - ./elk/secrets:/secrets
        - ./elk/setup/:/setup/
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELK_VERSION: ${ELK_VERSION}

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: always
    depends_on:
      - node-exporter

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100"
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana/provisioning/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

secrets:
  elasticsearch.keystore:
    file: ./elk/secrets/keystore/elasticsearch.keystore
  elasticsearch.service_tokens:
    file: ./elk/secrets/service_tokens
  elastic.ca:
    file: ./elk/secrets/certs/ca/ca.crt
  elasticsearch.certificate:
    file: ./elk/secrets/certs/elasticsearch/elasticsearch.crt
  elasticsearch.key:
    file: ./elk/secrets/certs/elasticsearch/elasticsearch.key
  kibana.certificate:
    file: ./elk/secrets/certs/kibana/kibana.crt
  kibana.key:
    file: ./elk/secrets/certs/kibana/kibana.key
 

volumes:
  vault_data:
  vault_token:
  approle_user:
  approle_user_db:
  approle_gateway:
  user_media:
  user_static:
  game_db_data:
  user_db_data:
  chat_db_data:
  auth_db_data:
  approle_game:
  approle_game_db:
  approle_chat:
  approle_chat_db:
  approle_auth:
  approle_auth_db:
  redis_data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:

networks:
  user_network:
    driver: bridge
  backtier:
    driver: bridge
    name: backtier
  frontier:
    driver: bridge
    name: frontier
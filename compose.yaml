services:
  vault:
    image: hashicorp/vault:latest
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200" # Expose the Vault API
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    networks:
      - backtier

  auth:
    build:
      context: ./Backend/authService
      dockerfile: config/docker/Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./Backend/authService:/app
    environment:
      - DJANGO_SETTINGS_MODULE=authService.settings
      - DB_NAME=auth_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=auth_db
      - DB_PORT=5432
      - USER_SERVICE_URL=http://user:8000 # For service communication
      - INTERNAL_API_KEY=your-secure-key-here
    depends_on:
      auth_db:
        condition: service_healthy
      user:
        condition: service_started
    networks:
      - backtier
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8001"

  auth_db:
    image: postgres:latest
    environment:
      POSTGRES_DB: "auth_db"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    ports:
      - "5:5432" # Different port from other DBs
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - backtier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  user:
    build:
      context: ./Backend/userService
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/userService:/app
      - user_static:/app/static
      - user_media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=userService.settings
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=user_db
      - DB_PORT=5432
      - AUTH_SERVICE_URL=http://auth:8001
      - INTERNAL_API_KEY=your-secure-key-here
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - backtier
    command: sh -c "pip install -r config/requirements.txt && python manage.py migrate && uvicorn userService.asgi:application --host 0.0.0.0 --port 8000 --reload"

  chat:
    build:
      context: ./Backend/chatService
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./Backend/chatService:/app
      - ./Backend/userService/media:/app/media
      - user_media_data:/app/media
    environment:
      DB_NAME: "postgres"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "user_db"
      DB_PORT: "5432"
    depends_on:
      - vault
      - user_db
    networks:
      - backtier

  user_db:
    image: postgres:latest
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres"
    ports:
      - "5432:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - backtier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  chat_db:
    image: postgres:latest
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres"
    ports:
      - "5433:5432" # Note: Different port from user_db
    volumes:
      - chat_db_data:/var/lib/postgresql/data
    networks:
      - backtier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      - vault
      - user
      - auth # Add this line
      - frontend
    volumes:
      - ./ApiGateway/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - user_media_data:/app/media
      - ./ApiGateway/ssl:/etc/nginx/ssl:ro # Mount SSL certificates
    networks:
      - backtier
      - frontier

  frontend:
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    ports:
      - "5173:5173" # Vite's default dev server port
    volumes:
      - ./FrontEnd:/app # Mount the entire FrontEnd directory
      - /app/node_modules # Preserve node_modules from container
    environment:
      - NODE_ENV=development
    command: npm run dev -- --host # Run dev server and allow external connections
    networks:
      - frontier

  game:
    build:
      context: ./Backend/gameService
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    volumes:
      - ./Backend/gameService:/app
    environment:
      - DJANGO_SETTINGS_MODULE=gameService.settings
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=game_db
      - DB_PORT=5432 # Changed from 5435 to match game_db's internal port
      - PYTHONPATH=/app
    depends_on:
      game_db:
        condition: service_healthy # Add health check dependency
    networks:
      - backtier

  game_db:
    image: postgres:latest
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres"
    ports:
      - "5435:5432"
    volumes:
      - game_db_data:/var/lib/postgresql/data
    networks:
      - backtier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  user_db_data:
  chat_db_data:
  frontend_dist:
  auth_db_data:
  user_media_data:
  game_db_data:
  user_static:
  user_media:

networks:
  backtier:
    driver: bridge
  frontier:
    driver: bridge

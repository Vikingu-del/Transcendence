services:

  vault:
    container_name: vault
    build:
      context: ./Security/Vault
      dockerfile: Dockerfile
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      - backtier
    environment:
      - VAULT_ADDR=http://vault:8200
    volumes:
      - vault_data:/vault/file
      - vault_token:/vault/token
      - approle_user:/vault/approle/user
      - approle_user_db:/vault/approle/user_db  
      - approle_gateway:/vault/approle/gateway
      - approle_chat:/vault/approle/chat
      - approle_chat_db:/vault/approle/chat_db
      - approle_auth:/vault/approle/auth
      - approle_auth_db:/vault/approle/auth_db
      # - approle_game:/vault/approle/game
      # - approle_game_db:/vault/approle/game_db
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://localhost:8200"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  vault_secrets:
    container_name: vault_secrets
    build:
      context: ./Security/VaultSecrets
      dockerfile: Dockerfile
    env_file:
      - ./Security/VaultSecrets/secrets/.env
    networks:
      - backtier
    depends_on:
      vault:
        condition: service_healthy
    restart: on-failure
    volumes:
      - vault_token:/vault/token:ro
      - approle_user:/vault/approle/user
      - approle_user_db:/vault/approle/user_db
      - approle_gateway:/vault/approle/gateway
      - approle_chat:/vault/approle/chat
      - approle_chat_db:/vault/approle/chat_db
      - approle_auth:/vault/approle/auth
      - approle_auth_db:/vault/approle/auth_db
      # - approle_game:/vault/approle/game
      # - approle_game_db:/vault/approle/game_db

  user:
    container_name: user
    build:
      context: ./Backend/userService
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/userService:/app
      - approle_user:/vault/approle/user:ro
      - user_static:/app/static
      - user_media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=userService.settings
      - AUTH_SERVICE_URL=http://auth:8001
      - INTERNAL_API_KEY=your-secure-key-here
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      user_db:
        condition: service_healthy
    networks:
      - backtier

  user_db:
    container_name: user_db
    build:
      context: ./Database/user_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: 
      - "5432:5432"
    volumes:
      - approle_user_db:/vault/approle/user_db:ro
      - user_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  chat:
    container_name: chat
    build:
      context: ./Backend/chatService
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./Backend/chatService:/app
      - approle_chat:/vault/approle/chat:ro
      - user_static:/app/static
      - user_media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=chatService.settings
      - API_PREFIX=/api/chat
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      chat_db:
        condition: service_healthy
    networks:
      - backtier
    
  chat_db:
    container_name: chat_db
    build:
      context: ./Database/chat_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - approle_chat_db:/vault/approle/chat_db:ro
      - chat_db_data:/var/lib/postgresql/data
    networks:
      - backtier

  redis:
    container_name: redis
    image: redis:alpine
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - backtier
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5


  auth:
    container_name: auth
    build:
      context: ./Backend/authService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./Backend/authService:/app
      - approle_auth:/vault/approle/auth:ro
    environment:
      - DJANGO_SETTINGS_MODULE=authService.settings
      - USER_SERVICE_URL=http://user:8000  # For service communication
      - INTERNAL_API_KEY=your-secure-key-here #AddddDDDED IVAN
    depends_on:
      vault:
        condition: service_started
      user:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      auth_db:
        condition: service_healthy
    networks:
      - backtier

  auth_db:
    container_name: auth_db
    build:
      context: ./Database/auth_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      vault:
        condition: service_healthy
      vault_secrets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    volumes:
      - approle_auth_db:/vault/approle/auth_db:ro
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - backtier
    

  # game:
  #   container_name: game
  #   build:
  #     context: ./Backend/gameService
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8005:8005"
  #   volumes:
  #     - ./Backend/gameService:/app
  #     - approle_game:/vault/approle/game:ro
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=gameService.settings
  #     - USER_SERVICE_URL=http://game:8005  # For service communication
  #     - INTERNAL_API_KEY=your-secure-key-here #AddddDDDED IVAN
  #     # - PYTHONPATH=/app
  #   depends_on:
  #     vault:
  #       condition: service_started
  #     vault_secrets:
  #       condition: service_completed_successfully
  #     game_db:
  #       condition: service_healthy  # Add health check dependency
  #   networks:
  #     - backtier

  # game_db:
  #   container_name: game_db
  #   build:
  #     context: ./Database/game_db
  #     dockerfile: Dockerfile
  #   restart: always
  #   depends_on:
  #     vault:
  #       condition: service_healthy
  #     vault_secrets:
  #       condition: service_completed_successfully
  #   healthcheck:
  #     test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   ports:
  #     - "5435:5432"
  #   volumes:
  #     - approle_game_db:/vault/approle/game_db:ro
  #     - game_db_data:/var/lib/postgresql/data
  #   networks:
  #     - backtier

  gateway:
    container_name: gateway
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      - vault
      - vault_secrets
      - user
      - frontend
      - chat
      - auth
    volumes:
      - approle_gateway:/vault/approle/gateway:ro
      - ./ApiGateway/ssl:/etc/nginx/ssl:ro # Mount SSL certificates
      - user_media:/app/media
    # environment:
    #   - NGINX_HOST=${NGINX_HOST:-10.12.12.5}
    #   - NGINX_PORT=${NGINX_PORT:-443}
    networks:
      - backtier
      - frontier

  frontend:
    container_name: frontend
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Vite's default dev server port
    volumes:
      - ./FrontEnd:/app
      - /app/node_modules # Preserve node_modules from container
    environment:
      - NODE_ENV=development
      # - VITE_HOST=0.0.0.0
      # - VITE_API_URL=${NGINX_HOST:-10.12.12.5}
    command: npm run dev -- --host
    networks:
      - frontier

 

volumes:
  vault_data:
  vault_token:
  approle_user:
  approle_user_db:
  approle_gateway:
  user_media:
  user_static:
  # game_db_data:
  user_db_data:
  chat_db_data:
  auth_db_data:
  approle_game:
  approle_game_db:
  approle_chat:
  approle_chat_db:
  approle_auth:
  approle_auth_db:
  redis_data:

networks:
  user_network:
    driver: bridge
  backtier:
    driver: bridge
    name: backtier
  frontier:
    driver: bridge
    name: frontier

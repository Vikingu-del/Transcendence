services:

  # swagger:
  #   container_name: swagger
  #   build:
  #     context: ./Swagger
  #     dockerfile: Dockerfile
  #   environment:
  #     URLS_PRIMARY_NAME: "UserService" # Default API to display in Swagger UI
  #     URLS: '[{ "url": "/doc/ApiGateway.yaml", "name": "ApiGateway" }, 
  #        { "url": "/doc/UserService.yaml", "name": "UserService" },
  #        { "url": "/doc/Security.yaml", "name": "Security" },
  #        { "url": "/doc/Database.yaml", "name": "Database" },
  #        { "url": "/doc/FrontEnd.yaml", "name": "FrontEnd" }]'
  #   volumes:
  #     - ./docs/openapi:/usr/share/nginx/html/doc # Mount local OpenAPI specs
  #   ports:
  #     - "8080:8080"  # Swagger UI available at localhost:8080
  #   restart: always
  #   networks:
  #     backtier:

  vault:
    container_name: vault
    build:
      context: ./Security/Vault
      dockerfile: Dockerfile
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      - backtier
    environment:
      - VAULT_ADDR=http://vault:8200
    volumes:
      - vault_secrets_data:/vault/secrets
      - ./Security/VaultSecrets/secrets/.env:/secrets/.env
    healthcheck:
      test: ["CMD", "vault", "status", "-address=http://localhost:8200"]
      interval: 10s
      timeout: 5s
      retries: 5

  vault_secrets:
    container_name: vault_secrets
    build:
      context: ./Security/VaultSecrets
      dockerfile: Dockerfile
    env_file:
      - ./Security/VaultSecrets/secrets/.env
    networks:
      - backtier
    depends_on:
      vault:
        condition: service_healthy
    restart: on-failure
    volumes:
      - ./Security/VaultSecrets/secrets:/secrets
      - vault_secrets_data:/vault/secrets

  user:
    container_name: user
    build:
      context: ./Backend/userService
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/userService:/app
      - vault_secrets_data:/vault/secrets # mounted role_id/secret_id
    depends_on:
      vault:
        condition: service_started
      vault_secrets:
        condition: service_completed_successfully
      user_db:
        condition: service_healthy
    networks:
      - backtier
      - user_network

  user_db:
    container_name: user_db
    build:
      context: ./Database/user_db
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - vault
      - vault_secrets
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: 
      - "5432:5432"
    volumes:
      - vault_secrets_data:/vault/secrets
      - user_db_data:/var/lib/postgresql/data
    networks:
      - backtier
      - user_network

  gateway:
    container_name: gateway
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      - vault
      - vault_secrets
      - user
      - frontend
    volumes:
      - ./ApiGateway/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./.cert/:/etc/nginx/ssl/
      - vault_secrets_data:/vault/secrets
    networks:
      - backtier

  frontend:
    container_name: frontend
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    ports:
      - "5173:5173"  # Vite's default dev server port
    volumes:
      - ./FrontEnd:/app
      - /app/node_modules # Preserve node_modules from container
    environment:
      - NODE_ENV=development
    command: npm run dev -- --host
    networks:
      - backtier
      - frontier

volumes:
  frontend_dist:
  user_db_data:
  secrets: # this is the shared volume between vault and vault_secrets
  vault_secrets_data:
    driver: local

networks:
  user_network:
    driver: bridge
  backtier:
    driver: bridge
    name: backtier
  frontier:
    driver: bridge
    name: frontier

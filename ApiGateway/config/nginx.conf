user nginx;
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log settings
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name localhost;

        # Redirect HTTP to HTTPS
        return 301 https://$host$request_uri;
    }

    # Main server block to serve the frontend and API
    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

        # Timeout and buffer settings
        # client_max_body_size 10M;           # Adjust as needed
        # proxy_read_timeout 300;
        # proxy_connect_timeout 300;
        # proxy_send_timeout 300;
        # send_timeout 300;


        # Serve the Vue frontend
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }


        # Reverse proxy to the Backend API (Django)
        location /user/ {
            proxy_pass http://user:8000;  # Ensure 'user' matches your service name
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_ssl_session_reuse off;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "upgrade";      # Important for WebSocket support
            proxy_set_header Upgrade $http_upgrade;     # Important for WebSocket support
            proxy_redirect off;
        }

        location /register/ {
            proxy_pass http://user:8000/register/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_ssl_session_reuse off;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;
            proxy_redirect off;
        }
        

        location /login/ {
            proxy_pass http://user:8000/login/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_ssl_session_reuse off;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;
            proxy_redirect off;
        }

        location /vault/ {
            proxy_pass http://vault:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_ssl_session_reuse off;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;
            proxy_redirect off;
        }

        # Security headers
        # add_header X-Frame-Options SAMEORIGIN always;
        # add_header X-Content-Type-Options nosniff always;
        # add_header X-XSS-Protection "1; mode=block" always;
        
        # # Custom error pages (optional)
        # error_page 404 /404.html;
        # error_page 500 502 503 504 /50x.html;
        
        # location = /50x.html {
        #     root /usr/share/nginx/html;
        # }
    }
}

load_module modules/ngx_http_modsecurity_module.so;
user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # ModSecurity configuration
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity.d/modsecurity.conf;
    
    # Logging
    error_log   /var/log/nginx/error.log debug;
    access_log  /var/log/nginx/access.log combined;
    
    # Common proxy headers
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # HTTP server (redirect to HTTPS)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name 10.12.12.5;
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name 10.12.12.5;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' $http_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;

        # Common proxy settings
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Frontend proxy
        location / {
            proxy_pass http://frontend:5173;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_cache_bypass $http_upgrade;
        }

        # API proxy
        location /api/ {
            proxy_pass http://user:8000;
        }

        # WebSocket proxy
        location /ws/ {
            proxy_pass http://user:8000;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;  # Prevent timeout (24h)
        }

        # Vault proxy
        location /vault/ {
            proxy_pass http://vault:8200;
        }
    }
}
load_module modules/ngx_http_modsecurity_module.so;

user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Enhanced logging
    log_format debug_format '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'upstream_addr="$upstream_addr" '
                          'upstream_status="$upstream_status" '
                          'upstream_response_time="$upstream_response_time"';

    access_log  /var/log/nginx/access.log debug_format;
    error_log   /var/log/nginx/error.log debug;

    # ModSecurity configuration
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity.d/modsecurity.conf;

    # CORS configuration
    map $http_origin $cors_origin {
        default "";
        "~^https?://localhost(:[0-9]+)?$" "$http_origin";
        "~^https?://${NGINX_HOST}(:[0-9]+)?$" "$http_origin";
    }

    # WebSocket configuration
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # HTTP server (redirect to HTTPS)
    server {
        listen 80;
        listen [::]:80;
        server_name localhost;
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name localhost;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        client_max_body_size 2M;

        # Global CORS headers
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since' always;

        # Frontend proxy
        location / {
            proxy_pass http://frontend:5173;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_intercept_errors on;
            error_page 502 = @frontend_down;
        }

        # Auth Service proxy
        location /api/auth/ {
            proxy_pass http://auth:8001/;  # Added trailing slash
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;

            # CORS for auth endpoints
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_intercept_errors on;
            error_page 502 = @auth_down;

            # Debug headers
            add_header X-Debug-Message "Proxying to auth service" always;
        }

        # User Service proxy
        location /api/user/ {
            proxy_pass http://user:8000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_intercept_errors on;
            error_page 502 = @backend_down;
        }

        # Media location block
        location /api/user/media/ {
            alias /app/media/;
            add_header Cache-Control "public, no-transform";
            expires 1h;
            try_files $uri $uri/ /app/media/default.png =404;
            access_log /var/log/nginx/media-access.log;
            error_log /var/log/nginx/media-error.log debug;
        }

        # User WebSocket proxy
        location /ws/ {
            proxy_pass http://user:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Chat Service proxy
        location /api/chats/ {
            proxy_pass http://chat:8001;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            error_page 502 = @chat_down;
        }

        # Chat WebSocket proxy
        location /chat/ws/ {
            proxy_pass http://chat:8001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_read_timeout 86400;
        }

        # Vault proxy (internal only)
        location /vault/ {
            proxy_pass http://vault:8200;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            deny all;  # Only internal access
        }

        # Error handlers
        location @frontend_down {
            add_header Content-Type application/json;
            return 502 '{"error": "Frontend service unavailable", "status": 502}';
        }

        location @backend_down {
            add_header Content-Type application/json;
            return 502 '{"error": "User service unavailable", "status": 502}';
        }

        location @auth_down {
            add_header Content-Type application/json;
            return 502 '{"error": "Auth service unavailable", "status": 502}';
        }

        location @chat_down {
            add_header Content-Type application/json;
            return 502 '{"error": "Chat service unavailable", "status": 502}';
        }

        # OPTIONS request handler
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
}
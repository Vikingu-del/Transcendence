load_module modules/ngx_http_modsecurity_module.so;
user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Enhanced logging
    log_format debug_format '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'upstream_addr="$upstream_addr" '
                          'upstream_status="$upstream_status" '
                          'upstream_response_time="$upstream_response_time"';

    # Update upstream definitions with explicit health checks
    upstream frontend_service {
        server frontend:5173 max_fails=3 fail_timeout=30s;
    }

    upstream user_service {
        server user:8000 max_fails=3 fail_timeout=30s;
    }

    upstream chat_service {
        server chat:8001 max_fails=3 fail_timeout=30s;
    }

    upstream vault_service {
        server vault:8200 max_fails=3 fail_timeout=30s;
    }

    # ModSecurity and basic configurations
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity.d/modsecurity.conf;
    
    error_log   /var/log/nginx/error.log debug;
    access_log  /var/log/nginx/access.log combined;
    
    # CORS and proxy configurations
    map $http_origin $cors_origin {
        default "";
        "~^https?://localhost(:[0-9]+)?$" "$http_origin";
        "~^https?://${NGINX_HOST}(:[0-9]+)?$" "$http_origin";
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name ${NGINX_HOST};
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name ${NGINX_HOST};

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        client_max_body_size 2M;

        # Global CORS headers
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since' always;

        # Global proxy settings
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Frontend
        location / {
            proxy_pass http://frontend_service;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_intercept_errors on;
            error_page 502 = @frontend_down;
        }

        # User Service API
        location /api/user/ {
            proxy_pass http://user_service/api/;
            proxy_set_header Host $http_host;  # Changed from $host
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_redirect off;
            
            # Other settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_intercept_errors on;
            error_page 502 = @backend_down;
        }

        # Chat Service API - Fixed proxy_pass to use chat_service instead of user_service
        location /api/chat/ {
            proxy_pass http://chat_service/api/;
            proxy_set_header Authorization $http_authorization;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            error_page 502 = @chat_down;
        }

        # Media files
        location /api/user/media/ {
            proxy_pass http://user_service/api/media/;
            proxy_set_header Host $host;
            expires 1h;
            add_header Cache-Control "public, no-transform";
        }

        # User WebSocket
        location /api/user/ws/ {
            proxy_pass http://user_service/ws/;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Chat WebSocket
        location /api/chat/ws/ {
            proxy_pass http://chat_service/ws/;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Vault
        location /vault/ {
            proxy_pass http://vault_service/;
            deny all;  # Only internal access
        }

        # OPTIONS request handler
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Error handlers
        location @backend_down {
            add_header Content-Type application/json;
            return 502 '{"error": "User service unavailable", "status": 502}';
        }

        location @chat_down {
            add_header Content-Type application/json;
            return 502 '{"error": "Chat service unavailable", "status": 502}';
        }

        # Add frontend error handler
        location @frontend_down {
            add_header Content-Type application/json;
            return 502 '{"error": "Frontend service unavailable", "status": 502}';
        }
    }
}